---
import HeaderDashboard from '../../components/HeaderDashboard.astro';
import FooterDashboard from '../../components/FooterDashboard.astro';

export const prerender = false;

const { id } = Astro.params;

// Importer PocketBase c√¥t√© serveur
import PocketBase from "pocketbase";

const pb = new PocketBase("http://127.0.0.1:8090");

let user = null;
let error = null;

if (id) {
  try {
    console.log('üîç R√©cup√©ration du profil utilisateur:', id);
    user = await pb.collection('users').getOne(id);
    console.log('‚úÖ Utilisateur trouv√©:', user.name || user.username || user.email);
    console.log('ü™ê Orbite √©quip√©e dans la DB:', user.equipped_orbit);
  } catch (err) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'utilisateur:', err);
    error = 'Utilisateur non trouv√©';
  }
}

// Fonctions utilitaires
function formatDate(dateString) {
  if (!dateString) return 'Date non sp√©cifi√©e';
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return 'Date invalide';
    const options = { 
      day: 'numeric', 
      month: 'long', 
      year: 'numeric'
    };
    return date.toLocaleDateString('fr-FR', options);
  } catch (e) {
    console.error("Erreur lors du formatage de la date:", e);
    return 'Date invalide';
  }
}

function getAvatarUrl(user) {
  if (!user || !user.avatar) return null;
  try {
    return pb.files.getUrl(user, user.avatar);
  } catch (error) {
    console.warn('‚ö†Ô∏è Erreur lors de la construction de l\'URL avatar:', error);
    return null;
  }
}
---

<html lang="fr">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width" />
  <title>{user ? `Profil de ${user.name || user.username || user.email}` : 'Profil utilisateur'}</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="min-h-screen bg-gradient-to-b from-purple-950 via-purple-900 to-black">
  <HeaderDashboard />
  
  <div class="min-h-screen pt-20 pb-12">
    <div class="max-w-4xl mx-auto px-4">
      
      {error ? (
        <!-- Page d'erreur -->
        <div class="min-h-screen flex items-center justify-center">
          <div class="max-w-2xl mx-auto text-center text-white">
            <div class="mb-8">
              <div class="text-8xl mb-4">üë§</div>
              <h1 class="text-3xl font-bold mb-4">Utilisateur non trouv√©</h1>
              <p class="text-xl text-purple-200 mb-6">
                L'utilisateur avec l'ID <code class="bg-purple-800 px-2 py-1 rounded">{id}</code> n'existe pas.
              </p>
            </div>
            
            <div class="space-y-4">
              <button 
                onclick="history.back()" 
                class="px-6 py-3 border border-white text-white rounded-full hover:bg-white hover:text-purple-900 transition-colors"
              >
                ‚Üê Retour
              </button>
            </div>
          </div>
        </div>
      ) : user ? (
        <!-- Profil utilisateur -->
        <div class="bg-white/10 backdrop-blur-sm rounded-2xl border border-white/20 overflow-hidden">
          
          <!-- Header du profil -->
          <div class="bg-gradient-to-r from-purple-600 to-purple-800 p-8 text-center">
            <div class="flex flex-col items-center space-y-4">
              
              <!-- Avatar avec orbite -->
              <div class="relative">
                <div id="user-avatar-container" class="relative">
                  {getAvatarUrl(user) ? (
                    <img 
                      id="user-avatar"
                      src={getAvatarUrl(user) || "/placeholder.svg"} 
                      alt={user.name || user.username || user.email}
                      class="w-32 h-32 rounded-full border-4 border-white/30 object-cover shadow-lg"
                    />
                  ) : (
                    <div id="user-avatar" class="w-32 h-32 rounded-full border-4 border-white/30 bg-purple-700 flex items-center justify-center shadow-lg">
                      <span class="text-4xl font-bold text-white">
                        {(user.name || user.username || user.email || 'U').substring(0, 2).toUpperCase()}
                      </span>
                    </div>
                  )}
                </div>
              </div>
              
              <!-- Nom -->
              <div>
                <h1 class="text-3xl font-bold text-white mb-2">
                  {user.name || user.username || 'Utilisateur'}
                </h1>
                {user.name && user.username && (
                  <p class="text-purple-200 text-lg">@{user.username}</p>
                )}
              </div>
              
            </div>
          </div>
          
          <!-- Contenu du profil -->
          <div class="p-8">
            <div class="grid md:grid-cols-2 gap-8">
              
              <!-- Informations personnelles -->
              <div class="space-y-6">
                <h2 class="text-2xl font-bold text-white mb-4 flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  Informations
                </h2>
                
                <div class="space-y-4">
                  
                  <!-- Date de cr√©ation du compte -->
                  <div class="bg-white/5 rounded-lg p-4 border border-white/10">
                    <div class="flex items-center gap-3">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      <div>
                        <p class="text-sm text-purple-300">Membre depuis</p>
                        <p class="text-white font-medium">{formatDate(user.created)}</p>
                      </div>
                    </div>
                  </div>
                  
                  <!-- Statut de v√©rification -->
                  <div class="bg-white/5 rounded-lg p-4 border border-white/10">
                    <div class="flex items-center gap-3">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      <div>
                        <p class="text-sm text-purple-300">Statut</p>
                        <p class="text-white font-medium">
                          {user.verified ? (
                            <span class="text-green-400 flex items-center gap-1">
                              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                              </svg>
                              V√©rifi√©
                            </span>
                          ) : (
                            <span class="text-yellow-400">Non v√©rifi√©</span>
                          )}
                        </p>
                      </div>
                    </div>
                  </div>
                  
                </div>
              </div>
              
              <!-- Statistiques -->
              <div class="space-y-6">
                <h2 class="text-2xl font-bold text-white mb-4 flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                  </svg>
                  Statistiques
                </h2>
                
                <!-- Points -->
                <div class="bg-gradient-to-r from-yellow-500/20 to-yellow-600/20 rounded-lg p-6 border border-yellow-500/30">
                  <div class="text-center">
                    <div class="text-4xl font-bold text-yellow-400 mb-2">
                      {user.points || 0}
                    </div>
                    <p class="text-yellow-200 font-medium">Points totaux</p>
                    <div class="mt-3 flex items-center justify-center gap-1 text-yellow-300 text-sm">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                      </svg>
                      Gagn√©s en participant aux activit√©s
                    </div>
                  </div>
                </div>
                
                <!-- Activit√©s cr√©√©es -->
                <div class="bg-white/5 rounded-lg p-4 border border-white/10">
                  <div class="flex items-center gap-3">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    <div class="flex-1">
                      <p class="text-sm text-purple-300">Activit√©s cr√©√©es</p>
                      <p class="text-white font-medium" id="created-events-count">Chargement...</p>
                    </div>
                  </div>
                </div>
                
                <!-- Participations -->
                <div class="bg-white/5 rounded-lg p-4 border border-white/10">
                  <div class="flex items-center gap-3">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                    </svg>
                    <div class="flex-1">
                      <p class="text-sm text-purple-300">Participations</p>
                      <p class="text-white font-medium" id="participations-count">Chargement...</p>
                    </div>
                  </div>
                </div>
                
              </div>
              
            </div>
            
            <!-- Bouton retour -->
            <div class="mt-8 pt-6 border-t border-white/10">
              <button 
                onclick="history.back()" 
                class="w-full md:w-auto px-6 py-3 border border-white text-white rounded-full hover:bg-white hover:text-purple-900 transition-colors font-medium"
              >
                ‚Üê Retour
              </button>
            </div>
            
          </div>
        </div>
      ) : (
        <!-- √âtat de chargement -->
        <div class="min-h-screen flex items-center justify-center">
          <div class="text-center text-white">
            <div class="animate-spin w-8 h-8 border-2 border-yellow-400 border-t-transparent rounded-full mx-auto mb-4"></div>
            <p>Chargement du profil...</p>
          </div>
        </div>
      )}
      
    </div>
  </div>
  
  <FooterDashboard />

  <!-- PocketBase JavaScript -->
  <script src="https://unpkg.com/pocketbase@0.21.1/dist/pocketbase.umd.js"></script>

  <script define:vars={{ userId: id, userData: user }}>
  let pb;
  
  document.addEventListener('DOMContentLoaded', async () => {
    if (!userData) return;
    
    try {
      pb = new PocketBase('http://127.0.0.1:8090');
      await loadUserStats();
      await loadUserOrbit();
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation:', error);
    }
  });
  
  async function loadUserStats() {
    try {
      // Charger le nombre d'√©v√©nements cr√©√©s
      const createdEvents = await pb.collection('event').getFullList({
        filter: `users = "${userId}"`,
        fields: 'id',
      });
      
      document.getElementById('created-events-count').textContent = `${createdEvents.length} activit√©${createdEvents.length > 1 ? 's' : ''}`;
      
      // Charger le nombre de participations
      const allEvents = await pb.collection('event').getFullList({
        fields: 'id,participe',
      });
      
      let participationCount = 0;
      allEvents.forEach(event => {
        if (event.participe && event.participe.includes(userId)) {
          participationCount++;
        }
      });
      
      document.getElementById('participations-count').textContent = `${participationCount} participation${participationCount > 1 ? 's' : ''}`;
      
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement des statistiques:', error);
      document.getElementById('created-events-count').textContent = 'Erreur';
      document.getElementById('participations-count').textContent = 'Erreur';
    }
  }
  
  async function loadUserOrbit() {
    try {
      console.log('ü™ê Chargement de l\'orbite √©quip√©e pour l\'utilisateur:', userId);
      
      // ‚úÖ Essayer d'abord l'API equip.js
      try {
        console.log('üîÑ Tentative via API equip...');
        const response = await fetch(`/api/equip?userId=${userId}`);
        
        if (response.ok) {
          const equipData = await response.json();
          console.log('üìã Donn√©es d\'√©quipement re√ßues via API:', equipData);
          
          // Trouver l'orbite √©quip√©e (celle avec equipped: true)
          const equippedOrbit = equipData.find(item => item.equipped === true);
          
          if (equippedOrbit) {
            console.log('ü™ê Orbite √©quip√©e trouv√©e via API:', equippedOrbit);
            applyOrbit(equippedOrbit.type, equippedOrbit.name);
            return;
          }
        } else {
          console.log('‚ö†Ô∏è API equip non disponible, utilisation de la DB directement');
        }
      } catch (apiError) {
        console.log('‚ö†Ô∏è Erreur API equip:', apiError);
      }
      
      // ‚úÖ Fallback : utiliser la base de donn√©es directement
      console.log('üîÑ R√©cup√©ration via base de donn√©es...');
      const user = await pb.collection('users').getOne(userId);
      const equippedOrbit = user.equipped_orbit || '';
      
      console.log('ü™ê Orbite √©quip√©e dans la DB:', equippedOrbit);
      
      if (equippedOrbit) {
        const orbitNames = {
          mercure: 'Orbite Mercure',
          venus: 'Orbite V√©nus',
          terre: 'Orbite Terre',
          mars: 'Orbite Mars'
        };
        
        applyOrbit(equippedOrbit, orbitNames[equippedOrbit] || equippedOrbit);
      } else {
        console.log('‚ÑπÔ∏è Aucune orbite √©quip√©e');
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement de l\'orbite:', error);
    }
  }
  
  function applyOrbit(orbitType, orbitName) {
    console.log('üé® Application de l\'orbite:', orbitType, orbitName);
    
    const avatarContainer = document.getElementById('user-avatar-container');
    const orbitClass = getOrbitClass(orbitType);
    
    if (avatarContainer && orbitClass) {
      avatarContainer.classList.add(orbitClass);
      console.log('‚úÖ Orbite appliqu√©e:', orbitClass);
      
      // Ajouter une indication de l'orbite √©quip√©e
      const orbitInfo = document.createElement('div');
      orbitInfo.className = 'mt-3 text-center';
      orbitInfo.innerHTML = `
        <div class="inline-flex items-center gap-2 bg-white/10 rounded-full px-3 py-1 text-sm text-white/80">
          <span class="w-2 h-2 rounded-full ${getOrbitColor(orbitType)}"></span>
          ${orbitName} √©quip√©e
        </div>
      `;
      avatarContainer.parentNode.appendChild(orbitInfo);
    } else {
      console.error('‚ùå Impossible d\'appliquer l\'orbite:', { avatarContainer: !!avatarContainer, orbitClass });
    }
  }
  
  function getOrbitClass(orbitType) {
    if (!orbitType) return '';
    
    const orbitClasses = {
      mercure: 'orbit-mercure-large',
      venus: 'orbit-venus-large', 
      terre: 'orbit-terre-large',
      mars: 'orbit-mars-large'
    };
    
    const result = orbitClasses[orbitType.toLowerCase()] || '';
    console.log('üéØ Classe d\'orbite pour', orbitType, ':', result);
    return result;
  }
  
  function getOrbitColor(orbitType) {
    const orbitColors = {
      mercure: 'bg-gray-400',
      venus: 'bg-yellow-400',
      terre: 'bg-blue-400', 
      mars: 'bg-red-400'
    };
    
    return orbitColors[orbitType.toLowerCase()] || 'bg-purple-400';
  }
</script>
</body>
</html>

<style>
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 768px) {
    h1 {
      font-size: 1.5rem !important;
    }
    
    h2 {
      font-size: 1.25rem !important;
    }
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  /* ‚úÖ Styles pour les orbites - CORRIG√â pour suivre exactement le cercle */
.orbit-mercure-large {
  position: relative;
  display: inline-block;
}
.orbit-mercure-large::before {
  content: '';
  position: absolute;
  top: -12px;
  left: -12px;
  right: -12px;
  bottom: -12px;
  border-radius: 50%;
  border: 2px solid #b1b1b1;
  opacity: 0.6;
}
.orbit-mercure-large::after {
  content: '';
  position: absolute;
  top: -16px; /* Position sur le cercle */
  left: 50%;
  width: 8px;
  height: 8px;
  background: #b1b1b1;
  border-radius: 50%;
  margin-left: -4px;
  transform-origin: 4px 80px; /* Centre de l'avatar + rayon */
  animation: planet-orbit 8s linear infinite;
  box-shadow: 0 0 8px #b1b1b1;
}

.orbit-venus-large {
  position: relative;
  display: inline-block;
}
.orbit-venus-large::before {
  content: '';
  position: absolute;
  top: -12px;
  left: -12px;
  right: -12px;
  bottom: -12px;
  border-radius: 50%;
  border: 2px solid #e8a952;
  opacity: 0.6;
}
.orbit-venus-large::after {
  content: '';
  position: absolute;
  top: -16px;
  left: 50%;
  width: 8px;
  height: 8px;
  background: #e8a952;
  border-radius: 50%;
  margin-left: -4px;
  transform-origin: 4px 80px;
  animation: planet-orbit 10s linear infinite;
  box-shadow: 0 0 8px #e8a952;
}

.orbit-terre-large {
  position: relative;
  display: inline-block;
}
.orbit-terre-large::before {
  content: '';
  position: absolute;
  top: -12px;
  left: -12px;
  right: -12px;
  bottom: -12px;
  border-radius: 50%;
  border: 2px solid #4b9cd3;
  opacity: 0.6;
}
.orbit-terre-large::after {
  content: '';
  position: absolute;
  top: -16px;
  left: 50%;
  width: 8px;
  height: 8px;
  background: #4b9cd3;
  border-radius: 50%;
  margin-left: -4px;
  transform-origin: 4px 80px;
  animation: planet-orbit 12s linear infinite;
  box-shadow: 0 0 8px #4b9cd3;
}

.orbit-mars-large {
  position: relative;
  display: inline-block;
}
.orbit-mars-large::before {
  content: '';
  position: absolute;
  top: -12px;
  left: -12px;
  right: -12px;
  bottom: -12px;
  border-radius: 50%;
  border: 2px solid #c1440e;
  opacity: 0.6;
}
.orbit-mars-large::after {
  content: '';
  position: absolute;
  top: -16px;
  left: 50%;
  width: 8px;
  height: 8px;
  background: #c1440e;
  border-radius: 50%;
  margin-left: -4px;
  transform-origin: 4px 80px;
  animation: planet-orbit 15s linear infinite;
  box-shadow: 0 0 8px #c1440e;
}

/* ‚úÖ Animation corrig√©e pour rotation parfaite */
@keyframes planet-orbit {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
</style>
