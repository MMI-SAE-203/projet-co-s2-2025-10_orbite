---
import HeaderDashboard from '../../components/HeaderDashboard.astro';
import FooterDashboard from '../../components/FooterDashboard.astro';
---

<html lang="fr">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width" />
  <title>V√©rification des Points - Admin</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="min-h-screen bg-gradient-to-b from-purple-950 via-purple-900 to-black">
  <HeaderDashboard />
  
  <main class="min-h-screen pt-20 px-4">
    <div class="max-w-4xl mx-auto">
      <h1 class="text-3xl font-bold text-white mb-8 text-center">
        üîß Administration - V√©rification des Points
      </h1>
      
      <!-- Panneau de contr√¥le -->
      <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-8 border border-white/20 shadow-2xl mb-8">
        <h2 class="text-xl font-bold text-white mb-6">V√©rification manuelle des points</h2>
        
        <div class="space-y-4">
          <p class="text-purple-200">
            Cette page permet de v√©rifier manuellement l'attribution des points pour les √©v√©nements pass√©s.
            Normalement, cette v√©rification devrait se faire automatiquement.
          </p>
          
          <button 
            id="check-points-btn"
            class="bg-yellow-400 hover:bg-yellow-500 text-black font-bold py-3 px-6 rounded-full transition-all transform hover:scale-105 shadow-lg"
          >
            üîç V√©rifier et attribuer les points
          </button>
          
          <div id="results" class="hidden mt-6 p-4 bg-white/5 rounded-lg border border-white/10">
            <h3 class="text-lg font-semibold text-white mb-2">R√©sultats :</h3>
            <div id="results-content" class="text-purple-200"></div>
          </div>
        </div>
      </div>
      
      <!-- Configuration automatique -->
      <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-8 border border-white/20 shadow-2xl mb-8">
        <h2 class="text-xl font-bold text-white mb-6">Configuration automatique</h2>
        
        <div class="space-y-4">
          <p class="text-purple-200">
            Pour automatiser cette v√©rification, vous pouvez :
          </p>
          
          <div class="bg-purple-900/30 rounded-lg p-4 border border-purple-700/50">
            <h3 class="text-white font-semibold mb-2">Option 1 : Cron Job (Recommand√©)</h3>
            <p class="text-purple-200 text-sm mb-2">Ajoutez cette ligne √† votre crontab pour v√©rifier les points chaque heure :</p>
            <code class="bg-black/50 text-green-400 p-2 rounded block text-sm">
              0 * * * * curl -X POST http://localhost:4321/api/check-points
            </code>
          </div>
          
          <div class="bg-purple-900/30 rounded-lg p-4 border border-purple-700/50">
            <h3 class="text-white font-semibold mb-2">Option 2 : V√©rification √† chaque visite</h3>
            <p class="text-purple-200 text-sm mb-2">Activer la v√©rification automatique √† chaque chargement de page :</p>
            <label class="flex items-center gap-2">
              <input type="checkbox" id="auto-check" class="rounded">
              <span class="text-white">V√©rifier automatiquement les points</span>
            </label>
          </div>
        </div>
      </div>
      
      <!-- Historique des √©v√©nements -->
      <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-8 border border-white/20 shadow-2xl">
        <h2 class="text-xl font-bold text-white mb-6">√âv√©nements pass√©s</h2>
        
        <div id="past-events" class="space-y-4">
          <!-- Les √©v√©nements seront charg√©s ici -->
        </div>
      </div>
    </div>
  </main>
  
  <FooterDashboard />
</body>
</html>

<script>
  import PocketBase from 'pocketbase';
  
  const pb = new PocketBase('http://127.0.0.1:8090');
  
  document.addEventListener('DOMContentLoaded', async () => {
    await loadPastEvents();
    setupEventListeners();
    
    // V√©rification automatique si activ√©e
    const autoCheck = localStorage.getItem('auto-check-points') === 'true';
    if (autoCheck) {
      document.getElementById('auto-check').checked = true;
      await checkPoints();
    }
  });
  
  function setupEventListeners() {
    const checkBtn = document.getElementById('check-points-btn');
    const autoCheckbox = document.getElementById('auto-check');
    
    checkBtn.addEventListener('click', async () => {
      checkBtn.disabled = true;
      checkBtn.textContent = '‚è≥ V√©rification en cours...';
      
      try {
        await checkPoints();
      } finally {
        checkBtn.disabled = false;
        checkBtn.textContent = 'üîç V√©rifier et attribuer les points';
      }
    });
    
    autoCheckbox.addEventListener('change', (e) => {
      localStorage.setItem('auto-check-points', e.target.checked.toString());
    });
  }
  
  async function checkPoints() {
    try {
      console.log('üîç D√©marrage de la v√©rification des points...');
      
      const response = await fetch('/api/check-points', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      const result = await response.json();
      
      const resultsDiv = document.getElementById('results');
      const resultsContent = document.getElementById('results-content');
      
      resultsDiv.classList.remove('hidden');
      
      if (result.success) {
        resultsContent.innerHTML = `
          <div class="space-y-2">
            <p class="text-green-400">‚úÖ V√©rification termin√©e avec succ√®s !</p>
            <p>üìä √âv√©nements trait√©s : <strong>${result.eventsProcessed}</strong></p>
            <p>üë• Participants r√©compens√©s : <strong>${result.participantsRewarded}</strong></p>
            <p>‚≠ê Total points attribu√©s : <strong>${result.totalPointsAwarded}</strong></p>
          </div>
        `;
        
        // Recharger les √©v√©nements pass√©s
        await loadPastEvents();
      } else {
        resultsContent.innerHTML = `
          <p class="text-red-400">‚ùå Erreur : ${result.message}</p>
          <p class="text-sm text-gray-400">${result.error || ''}</p>
        `;
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification:', error);
      
      const resultsDiv = document.getElementById('results');
      const resultsContent = document.getElementById('results-content');
      
      resultsDiv.classList.remove('hidden');
      resultsContent.innerHTML = `
        <p class="text-red-400">‚ùå Erreur de connexion : ${error.message}</p>
      `;
    }
  }
  
  async function loadPastEvents() {
    try {
      const now = new Date();
      const pastEvents = await pb.collection('event').getFullList({
        filter: `date_event < "${now.toISOString()}"`,
        sort: '-date_event',
        expand: 'users'
      });
      
      const container = document.getElementById('past-events');
      
      if (pastEvents.length === 0) {
        container.innerHTML = `
          <div class="text-center py-8">
            <div class="text-4xl mb-2">üìÖ</div>
            <p class="text-purple-200">Aucun √©v√©nement pass√© trouv√©</p>
          </div>
        `;
        return;
      }
      
      container.innerHTML = pastEvents.map(event => {
        const eventDate = new Date(event.date_event);
        const participantCount = event.participe ? event.participe.length : 0;
        const pointsDistributed = event.points_distributed || false;
        
        return `
          <div class="bg-white/5 rounded-lg p-4 border border-white/10">
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <h3 class="text-white font-semibold">${event.nom_event}</h3>
                <p class="text-purple-200 text-sm">
                  üìÖ ${eventDate.toLocaleDateString('fr-FR', { 
                    day: 'numeric', 
                    month: 'long', 
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </p>
                <p class="text-purple-200 text-sm">
                  üë• ${participantCount} participant${participantCount > 1 ? 's' : ''}
                </p>
              </div>
              
              <div class="flex items-center gap-2">
                ${pointsDistributed ? 
                  '<span class="px-3 py-1 bg-green-600 text-white text-xs rounded-full">‚úÖ Points distribu√©s</span>' :
                  '<span class="px-3 py-1 bg-orange-600 text-white text-xs rounded-full">‚è≥ En attente</span>'
                }
              </div>
            </div>
          </div>
        `;
      }).join('');
      
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement des √©v√©nements:', error);
    }
  }
</script>
