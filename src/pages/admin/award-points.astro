---
import HeaderDashboard from '../../components/HeaderDashboard.astro';
import FooterDashboard from '../../components/FooterDashboard.astro';
---

<html lang="fr">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width" />
  <title>Attribution des Points - Admin</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="min-h-screen bg-gradient-to-b from-purple-950 via-purple-900 to-black">
  <HeaderDashboard />
  
  <main class="min-h-screen pt-20 px-4">
    <div class="max-w-4xl mx-auto">
      <h1 class="text-3xl font-bold text-white mb-8 text-center">
        ⭐ Attribution des Points
      </h1>
      
      <!-- Panneau principal -->
      <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-8 border border-white/20 shadow-2xl mb-8">
        <h2 class="text-xl font-bold text-white mb-6">Attribution automatique des points</h2>
        
        <div class="space-y-6">
          <div class="bg-yellow-400/20 border border-yellow-400/50 rounded-lg p-4">
            <h3 class="text-white font-semibold mb-2">🎯 Comment ça marche :</h3>
            <ul class="text-yellow-200 text-sm space-y-1">
              <li>• Le système trouve tous les événements passés</li>
              <li>• Il attribue 10 points à chaque participant</li>
              <li>• Les événements sont marqués comme "traités"</li>
            </ul>
          </div>
          
          <button 
            id="award-points-btn"
            class="w-full bg-yellow-400 hover:bg-yellow-500 text-black font-bold py-4 px-6 rounded-full transition-all transform hover:scale-105 shadow-lg"
          >
            ⭐ Attribuer les points maintenant
          </button>
          
          <div id="loading" class="hidden text-center py-4">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-yellow-400"></div>
            <p class="text-white mt-2">Attribution en cours...</p>
          </div>
          
          <div id="results" class="hidden mt-6 p-4 bg-white/5 rounded-lg border border-white/10">
            <h3 class="text-lg font-semibold text-white mb-2">Résultats :</h3>
            <div id="results-content" class="text-purple-200"></div>
          </div>
        </div>
      </div>
      
      <!-- Événements en attente -->
      <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-8 border border-white/20 shadow-2xl">
        <h2 class="text-xl font-bold text-white mb-6">📋 Événements en attente</h2>
        <div id="pending-events" class="space-y-4">
          <!-- Chargé par JavaScript -->
        </div>
      </div>
    </div>
  </main>
  
  <FooterDashboard />
</body>
</html>

<script>
  import PocketBase from 'pocketbase';
  
  const pb = new PocketBase('https://pocketbaseprojet.alexandre-demling.fr');
  
  document.addEventListener('DOMContentLoaded', async () => {
    await loadPendingEvents();
    setupEventListeners();
  });
  
  function setupEventListeners() {
    const awardBtn = document.getElementById('award-points-btn');
    
    awardBtn.addEventListener('click', async () => {
      const loading = document.getElementById('loading');
      const results = document.getElementById('results');
      const resultsContent = document.getElementById('results-content');
      
      // Afficher le loading
      awardBtn.style.display = 'none';
      loading.classList.remove('hidden');
      results.classList.add('hidden');
      
      try {
        console.log('🔄 Démarrage attribution des points...');
        
        const response = await fetch('/api/award-points', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
        });
        
        const result = await response.json();
        console.log('📊 Résultat:', result);
        
        // Masquer le loading
        loading.classList.add('hidden');
        results.classList.remove('hidden');
        
        if (result.success) {
          resultsContent.innerHTML = `
            <div class="space-y-2">
              <p class="text-green-400">✅ Attribution terminée avec succès !</p>
              <p>📊 Événements traités : <strong>${result.eventsProcessed}</strong></p>
              <p>👥 Participants récompensés : <strong>${result.participantsRewarded}</strong></p>
              <p>⭐ Total points attribués : <strong>${result.totalPointsAwarded}</strong></p>
              
              ${result.events.length > 0 ? `
                <div class="mt-4">
                  <p class="font-semibold">Événements traités :</p>
                  <ul class="text-sm mt-2 space-y-1">
                    ${result.events.map(event => `
                      <li>• ${event.name} (${event.participants} participants)</li>
                    `).join('')}
                  </ul>
                </div>
              ` : ''}
            </div>
          `;
          
          // Recharger les événements en attente
          await loadPendingEvents();
          
          // Réafficher le bouton après 3 secondes
          setTimeout(() => {
            awardBtn.style.display = 'block';
          }, 3000);
          
        } else {
          resultsContent.innerHTML = `
            <p class="text-red-400">❌ Erreur : ${result.message}</p>
            <p class="text-sm text-gray-400">${result.error || ''}</p>
          `;
          awardBtn.style.display = 'block';
        }
        
      } catch (error) {
        console.error('❌ Erreur:', error);
        
        loading.classList.add('hidden');
        results.classList.remove('hidden');
        resultsContent.innerHTML = `
          <p class="text-red-400">❌ Erreur de connexion : ${error.message}</p>
        `;
        awardBtn.style.display = 'block';
      }
    });
  }
  
  async function loadPendingEvents() {
    try {
      const now = new Date();
      
      // Récupérer tous les événements
      const allEvents = await pb.collection('event').getFullList({
        sort: '-date_event'
      });
      
      // Filtrer les événements passés qui n'ont pas encore distribué les points
      const pendingEvents = allEvents.filter(event => {
        const eventDate = new Date(event.date_event);
        return eventDate < now && !event.points_distributed && event.participe && event.participe.length > 0;
      });
      
      const container = document.getElementById('pending-events');
      
      if (pendingEvents.length === 0) {
        container.innerHTML = `
          <div class="text-center py-8">
            <div class="text-4xl mb-2">✅</div>
            <p class="text-purple-200">Aucun événement en attente d'attribution de points</p>
          </div>
        `;
        return;
      }
      
      container.innerHTML = pendingEvents.map(event => {
        const eventDate = new Date(event.date_event);
        const participantCount = event.participe ? event.participe.length : 0;
        const totalPoints = participantCount * 10;
        
        return `
          <div class="bg-white/5 rounded-lg p-4 border border-white/10">
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <h3 class="text-white font-semibold">${event.nom_event}</h3>
                <p class="text-purple-200 text-sm">
                  📅 ${eventDate.toLocaleDateString('fr-FR', { 
                    day: 'numeric', 
                    month: 'long', 
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </p>
                <p class="text-purple-200 text-sm">
                  👥 ${participantCount} participant${participantCount > 1 ? 's' : ''} → ⭐ ${totalPoints} points à attribuer
                </p>
              </div>
              
              <div class="flex items-center gap-2">
                <span class="px-3 py-1 bg-orange-600 text-white text-xs rounded-full">⏳ En attente</span>
              </div>
            </div>
          </div>
        `;
      }).join('');
      
    } catch (error) {
      console.error('❌ Erreur chargement événements:', error);
    }
  }
</script>
