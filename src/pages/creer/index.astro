---
import Layout from '../../layouts/Layout.astro';
import HeaderDashboard from '../../components/HeaderDashboard.astro';
import FooterDashboard from '../../components/FooterDashboard.astro';
import EventMap from '../../components/EventMap.astro';
---

<Layout title="Créer un événement - Orbite">
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
        integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
        crossorigin=""/>

  <HeaderDashboard />

  <div class="min-h-screen px-4 py-8 bg-gradient-to-br from-purple-900 via-purple-800 to-indigo-900 pt-20">
    <div class="max-w-4xl mx-auto">
      <h1 class="text-3xl font-bold text-white mb-8 text-center">
         Créer un nouvel événement
      </h1>
      
      <!-- Messages d'état -->
      <div id="auth-error" class="bg-red-900/50 border border-red-500 text-white p-4 rounded-lg mb-6 hidden">
        <div class="flex items-center space-x-2">
          <span class="text-red-400">⚠️</span>
          <span>Vous devez être connecté pour créer un événement.</span>
        </div>
      </div>
      
      <div id="form-error" class="bg-red-900/50 border border-red-500 text-white p-4 rounded-lg mb-6 hidden">
        <div class="flex items-center space-x-2">
          <span class="text-red-400">❌</span>
          <span id="error-message">Une erreur s'est produite lors de la création de l'événement.</span>
        </div>
      </div>
      
      <div id="form-success" class="bg-green-900/50 border border-green-500 text-white p-4 rounded-lg mb-6 hidden">
        <div class="flex items-center space-x-2">
          <span class="text-green-400">✅</span>
          <span id="success-message">Activité créée avec succès!</span>
        </div>
      </div>
      
      <!-- Formulaire de création -->
      <form id="create-form" class="bg-white/10 backdrop-blur-sm rounded-xl p-8 border border-white/20 shadow-2xl space-y-6">
        
        <!-- Titre -->
        <div class="space-y-2">
          <label for="nom_event" class="block text-white font-medium">
             Titre de l'événement *
          </label>
          <input 
            type="text" 
            id="nom_event" 
            name="nom_event" 
            placeholder="Ex: Soirée jeux de société" 
            class="w-full bg-white border-2 border-purple-400/50 rounded-lg p-3 text-black placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent transition-all"
            required
          />
        </div>
        
        <!-- Date et heure -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="space-y-2">
            <label for="date_event" class="block text-white font-medium">
               Date de l'événement *
            </label>
            <input 
              type="datetime-local" 
              id="date_event" 
              name="date_event" 
              class="w-full bg-white border-2 border-purple-400/50 rounded-lg p-3 text-black focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent transition-all"
              required
            />
          </div>
          
          <div class="space-y-2">
            <label for="categorie_event" class="block text-white font-medium">
               Catégorie *
            </label>
            <select 
              id="categorie_event" 
              name="categorie_event" 
              class="w-full bg-white border-2 border-purple-400/50 rounded-lg p-3 text-black focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent transition-all"
              required
            >
              <option value="" class="bg-white text-black">Choisir une catégorie</option>
              <option value="Sport" class="bg-white text-black">⚽ Sport</option>
              <option value="Soirée" class="bg-white text-black">🎉 Soirée</option>
              <option value="Cinéma" class="bg-white text-black">🎬 Cinéma</option>
              <option value="Jeux" class="bg-white text-black">🎮 Jeux</option>
              <option value="Musique" class="bg-white text-black">🎵 Musique</option>
              <option value="Chill" class="bg-white text-black">😌 Chill</option>
              <option value="Voyages" class="bg-white text-black">✈️ Voyages</option>
              <option value="Études" class="bg-white text-black">📚 Études</option>
              <option value="Resto" class="bg-white text-black">🍽️ Resto</option>
              <option value="Rencontres" class="bg-white text-black">👥 Rencontres</option>
              <option value="Cuisine" class="bg-white text-black">👨‍🍳 Cuisine</option>
              <option value="Shopping" class="bg-white text-black">🛍️ Shopping</option>
              <option value="Culture" class="bg-white text-black">🎭 Culture</option>
              <option value="Bien-être" class="bg-white text-black">🧘 Bien-être</option>
              <option value="Bénévolat" class="bg-white text-black">🤝 Bénévolat</option>
            </select>
          </div>
        </div>
        
        <!-- Lieu et participants -->
        <div class="grid grid-cols-1 md:grid-cols-1 gap-4">
          <div class="space-y-2">
            <label for="lieu_event" class="block text-white font-medium">
               Lieu de l'événement *
            </label>
            <input 
              type="text" 
              id="lieu_event" 
              name="lieu_event" 
              placeholder="Ex: Campus universitaire" 
              class="w-full bg-white border-2 border-purple-400/50 rounded-lg p-3 text-black placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent transition-all"
              required
            />
          </div>
          
          <div class="space-y-2">
            <label for="nb_users_max" class="block text-white font-medium">
               Nombre max de participants *
            </label>
            <input 
              type="number" 
              id="nb_users_max" 
              name="nb_users_max" 
              min="1" 
              max="1000"
              placeholder="Ex: 20" 
              class="w-full bg-white border-2 border-purple-400/50 rounded-lg p-3 text-black placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent transition-all"
              required
            />
          </div>
        </div>
        
        <!-- Information sur les points automatiques -->
        <div class="bg-yellow-400/20 border border-yellow-400/50 rounded-lg p-4">
          <div class="flex items-center gap-3">
            <div class="text-2xl"></div>
            <div>
              <h3 class="text-white font-semibold mb-1">Système de points automatique</h3>
              <p class="text-yellow-200 text-sm">
                • Vous gagnez <strong>10 points</strong> en créant cette activité<br>
                • Les participants gagnent <strong>10 points</strong> en participant à l'événement
              </p>
            </div>
          </div>
        </div>
        
        <!-- Description -->
        <div class="space-y-2">
          <label for="description_event" class="block text-white font-medium">
             Description de l'événement *
          </label>
          <textarea 
            id="description_event" 
            name="description_event" 
            rows="4" 
            placeholder="Décrivez votre événement en détail..." 
            class="w-full bg-white border-2 border-purple-400/50 rounded-lg p-3 text-black placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent transition-all resize-none"
            required
          ></textarea>
        </div>

       <!-- Image -->
<div class="space-y-2">
  <label for="image_event" class="block text-white font-medium">
     Image de l'événement
  </label>
  <div class="relative">
    <input 
      type="file" 
      id="image_event" 
      name="image_event" 
      accept="image/png,image/jpeg,image/jpg,image/webp,image/gif"
      class="hidden"
    />
    <div id="image-preview" class="w-full h-48 bg-white/10 border-2 border-dashed border-purple-400/50 rounded-lg flex items-center justify-center cursor-pointer hover:bg-white/20 transition-all group">
      <div class="text-center p-6" id="upload-prompt">
        <div class="w-16 h-16 mx-auto mb-4 bg-purple-400/20 rounded-full flex items-center justify-center group-hover:bg-purple-400/30 transition-all">
          <svg class="w-8 h-8 text-purple-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
        </div>
        <p class="text-purple-200 font-medium">Cliquez pour sélectionner une image</p>
        <p class="text-purple-300 text-sm mt-1">Formats acceptés : PNG, JPG, JPEG, WebP, GIF</p>
      </div>
      <img id="preview-img" class="w-full h-full object-cover rounded-lg hidden" src="#" alt="Aperçu" />
    </div>
    <p id="image-error" class="text-red-400 text-sm mt-2 hidden">⚠️ Format d'image non supporté. Utilisez PNG, JPG, JPEG, WebP ou GIF.</p>
  </div>
</div>
        
        <!-- Localisation sur carte -->
        <div class="space-y-4">
          <label class="block text-white font-medium">
             Localisation précise sur la carte
          </label>
          <p class="text-purple-200 text-sm">
            Cliquez sur la carte pour définir la position exacte de votre événement
          </p>
          
          <EventMap 
            height="h-64" 
            showLocationPicker={true}
            initialLat={47.5101}
            initialLng={6.7988}
            zoom={13}
          />
          
          <!-- Champs cachés pour les coordonnées -->
          <input type="hidden" id="latitude" name="latitude" value="47.5101" />
          <input type="hidden" id="longitude" name="longitude" value="6.7988" />
          
          <div class="flex items-center justify-between bg-white/10 rounded-lg p-3">
            <div id="location-display" class="text-sm text-purple-200">
               Latitude: 47.5101, Longitude: 6.7988
            </div>
            <button 
              type="button" 
              id="use-my-location" 
              class="text-xs bg-purple-600 hover:bg-purple-500 text-white px-3 py-1 rounded-full transition-all"
            >
               Ma position
            </button>
          </div>
        </div>
        
        <!-- Boutons d'action -->
        <div class="pt-6 flex flex-col sm:flex-row gap-4">
          <button 
            type="submit" 
            id="submit-button"
            class="flex-1 bg-gradient-to-r from-yellow-400 to-yellow-500 hover:from-yellow-500 hover:to-yellow-600 text-black font-bold py-3 px-8 rounded-full transition-all transform hover:scale-105 shadow-lg"
          >
            ✨ Créer l'événement (+10 points)
          </button>
          
          <a 
            href="/activities" 
            class="flex-1 bg-white/10 hover:bg-white/20 text-white font-medium py-3 px-8 rounded-full transition-all text-center border border-white/30"
          >
            ❌ Annuler
          </a>
        </div>
      </form>
    </div>
  </div>
  
  <FooterDashboard />
</Layout>

<!-- Leaflet JavaScript -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
        crossorigin=""></script>

<script>
  import PocketBase from 'pocketbase';
  import { createEvent } from '../../lib/pocketbase.ts';
  
  const pb = new PocketBase('https://pocketbaseprojet.alexandre-demling.fr');
  
  document.addEventListener('DOMContentLoaded', () => {
    // Vérifier l'authentification
    if (!pb.authStore.isValid) {
      document.getElementById('auth-error').classList.remove('hidden');
      document.getElementById('create-form').classList.add('hidden');
      
      // Ajouter un bouton de connexion
      const authError = document.getElementById('auth-error');
      if (authError) {
        authError.innerHTML += `
          <div class="mt-4">
            <a href="/login?redirect=/creer" class="inline-block px-6 py-2 bg-yellow-400 text-black rounded-full hover:bg-yellow-500 transition-all font-medium">
              🔑 Se connecter
            </a>
          </div>
        `;
      }
      return;
    }
    
    // Gestion de la sélection de localisation
    document.addEventListener('locationSelected', (event) => {
      const { lat, lng } = event.detail;
      document.getElementById('latitude').value = lat;
      document.getElementById('longitude').value = lng;
      document.getElementById('location-display').textContent = 
        `📍 Latitude: ${lat.toFixed(4)}, Longitude: ${lng.toFixed(4)}`;
    });
    
    // Utiliser la géolocalisation
    document.getElementById('use-my-location')?.addEventListener('click', () => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            
            // Mettre à jour les champs
            document.getElementById('latitude').value = lat;
            document.getElementById('longitude').value = lng;
            document.getElementById('location-display').textContent = 
              `📍 Latitude: ${lat.toFixed(4)}, Longitude: ${lng.toFixed(4)}`;
            
            // Centrer la carte sur la nouvelle position
            const mapKeys = Object.keys(window).filter(key => key.startsWith('map_'));
            if (mapKeys.length > 0) {
              const map = window[mapKeys[0]];
              const markerKey = mapKeys[0].replace('map_', 'marker_');
              const marker = window[markerKey];
              
              if (map && marker) {
                map.setView([lat, lng], 15);
                marker.setLatLng([lat, lng]);
              }
            }
          },
          (error) => {
            alert('❌ Erreur lors de la récupération de votre position: ' + error.message);
          }
        );
      } else {
        alert('❌ La géolocalisation n\'est pas prise en charge par votre navigateur.');
      }
    });
    
    // Gestion de l'aperçu d'image
    const imageInput = document.getElementById('image_event');
    const imagePreview = document.getElementById('image-preview');
    const previewImg = document.getElementById('preview-img');
    const uploadPrompt = document.getElementById('upload-prompt');
    const imageError = document.getElementById('image-error');
    
    imagePreview?.addEventListener('click', () => {
      imageInput?.click();
    });
    
    imageInput?.addEventListener('change', (e) => {
      const file = e.target.files?.[0];
      if (file) {
        // Vérifier le format PNG
        if (file.type !== 'image/png') {
          imageError?.classList.remove('hidden');
          imageInput.value = '';
          return;
        }
        
        imageError?.classList.add('hidden');
        
        const reader = new FileReader();
        reader.onload = (e) => {
          if (previewImg && uploadPrompt) {
            previewImg.src = e.target.result;
            previewImg.classList.remove('hidden');
            uploadPrompt.classList.add('hidden');
          }
        };
        reader.readAsDataURL(file);
      }
    });
    
    // Gestion de la soumission du formulaire
    const createForm = document.getElementById('create-form');
    createForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitButton = document.getElementById('submit-button');
      const formError = document.getElementById('form-error');
      const formSuccess = document.getElementById('form-success');
      const errorMessage = document.getElementById('error-message');
      const successMessage = document.getElementById('success-message');
      
      // Désactiver le bouton
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.innerHTML = '⏳ Création en cours...';
      }
      
      try {
        // Vérifier l'authentification avant tout
        console.log('🔍 Vérification de l\'authentification...');
        console.log('Auth store valid:', pb.authStore.isValid);
        console.log('User:', pb.authStore.model);
        
        if (!pb.authStore.isValid) {
          throw new Error('Utilisateur non authentifié');
        }
        
        // Vérifier que tous les champs requis sont remplis
        const requiredFields = ['nom_event', 'date_event', 'categorie_event', 'lieu_event', 'nb_users_max', 'description_event'];
        const missingFields = [];
        
        for (const field of requiredFields) {
          const element = document.getElementById(field);
          if (!element || !element.value || element.value.trim() === '') {
            missingFields.push(field);
          }
        }
        
        if (missingFields.length > 0) {
          throw new Error(`Champs requis manquants: ${missingFields.join(', ')}`);
        }
        
        // Créer un nouveau FormData avec les données nettoyées
        const finalFormData = new FormData();
        
        // Ajouter les champs de base
        finalFormData.append('nom_event', document.getElementById('nom_event').value.trim());
        finalFormData.append('description_event', document.getElementById('description_event').value.trim());
        
        // Corriger le format de la date
        const dateValue = document.getElementById('date_event').value;
        if (dateValue) {
          // Convertir la date locale en ISO string
          const dateObject = new Date(dateValue);
          finalFormData.append('date_event', dateObject.toISOString());
        } else {
          throw new Error('Date de l\'événement requise');
        }
        
        finalFormData.append('categorie_event', document.getElementById('categorie_event').value);
        finalFormData.append('lieu_event', document.getElementById('lieu_event').value.trim());
        finalFormData.append('nb_users_max', parseInt(document.getElementById('nb_users_max').value));
        
        // ✅ Points automatiques : toujours 10 points
        finalFormData.append('nb_points_gagne', 10);
        
        // Ajouter l'image seulement si elle existe
        const imageFile = document.getElementById('image_event').files[0];
        if (imageFile) {
          finalFormData.append('image_event', imageFile);
          console.log('📷 Image ajoutée:', imageFile.name, imageFile.size);
        }
        
        // Ajouter la localisation comme JSON
        const location = {
          lat: parseFloat(document.getElementById('latitude').value),
          lng: parseFloat(document.getElementById('longitude').value)
        };
        finalFormData.append('location', JSON.stringify(location));
        
        // IMPORTANT: Ajouter l'ID utilisateur dans la relation "users"
        finalFormData.append('users', pb.authStore.model.id);
        
        // Ajouter aussi l'ancien champ "user" pour la compatibilité
        finalFormData.append('user', pb.authStore.model.id);
        finalFormData.append('date_pub_event', new Date().toISOString());
        
        console.log('📍 Localisation ajoutée:', location);
        console.log('👤 Utilisateur ajouté dans relation "users":', pb.authStore.model.id);
        console.log('👤 Utilisateur ajouté dans champ "user":', pb.authStore.model.id);
        
        // Afficher toutes les données finales
        console.log('📋 Données finales à envoyer:');
        for (let [key, value] of finalFormData.entries()) {
          console.log(`${key}:`, value);
        }
        
        // Test de connexion à PocketBase
        console.log('🔗 Test de connexion à PocketBase...');
        const health = await pb.health.check();
        console.log('✅ PocketBase accessible:', health);
        
        // Créer l'événement directement avec pb.collection
        console.log('🔄 Création de l\'événement...');
        const record = await pb.collection('event').create(finalFormData);
        
        console.log('✅ Événement créé avec succès:', record);
        
        // ✅ Ajouter 10 points au créateur
        try {
          const currentUser = pb.authStore.model;
          const currentPoints = currentUser.points || 0;
          const newPoints = currentPoints + 10;
          
          await pb.collection('users').update(currentUser.id, {
            points: newPoints
          });
          
          console.log('⭐ Points ajoutés au créateur:', currentPoints, '->', newPoints);
        } catch (pointsError) {
          console.warn('⚠️ Erreur lors de l\'ajout des points:', pointsError);
          // Ne pas faire échouer la création pour les points
        }
        
        // Afficher le succès
        formError?.classList.add('hidden');
        formSuccess?.classList.remove('hidden');
        
        // Mettre à jour le message de succès
        if (successMessage) {
          successMessage.innerHTML = `
            <strong>🎉 Activité créée avec succès!</strong><br>
            <span class="text-green-300">+10 points gagnés ! Redirection vers la page des activités...</span>
          `;
        }
        
        // Rediriger vers la page des activités
        setTimeout(() => {
          window.location.href = '/activities';
        }, 2500);
        
      } catch (error) {
        console.error('❌ Erreur complète:', error);
        console.error('Status:', error.status);
        console.error('Data:', error.data);
        console.error('Message:', error.message);
        
        // Réactiver le bouton
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.innerHTML = '✨ Créer l\'événement (+10 points)';
        }
        
        // Afficher l'erreur
        formSuccess?.classList.add('hidden');
        formError?.classList.remove('hidden');
        
        if (errorMessage) {
          let errorText = 'Une erreur s\'est produite lors de la création.';
          
          if (error.status === 400) {
            errorText = 'Données invalides. Détails:';
            if (error.data) {
              console.log('Détails de l\'erreur 400:', error.data);
              // Afficher les erreurs spécifiques des champs
              const fieldErrors = [];
              for (const [field, messages] of Object.entries(error.data)) {
                if (Array.isArray(messages)) {
                  fieldErrors.push(`<strong>${field}</strong>: ${messages.join(', ')}`);
                } else {
                  fieldErrors.push(`<strong>${field}</strong>: ${messages}`);
                }
              }
              if (fieldErrors.length > 0) {
                errorText += '<br><small>' + fieldErrors.join('<br>') + '</small>';
              }
            } else {
              errorText += '<br><small>Vérifiez que tous les champs requis sont correctement remplis.</small>';
            }
          } else if (error.status === 401 || error.status === 403) {
            errorText = `
              Votre session a expiré. 
              <a href="/login?redirect=/creer" class="underline text-yellow-300">Reconnectez-vous</a>
            `;
          } else if (error.status === 404) {
            errorText = 'Collection "event" non trouvée. Vérifiez votre configuration PocketBase.';
          } else {
            errorText = error.message || errorText;
          }
          
          errorMessage.innerHTML = errorText;
        }
      }
    });
  });
</script>
