---
import Layout from '../../layouts/Layout.astro';
import HeaderDashboard from '../../components/HeaderDashboard.astro';
import FooterDashboard from '../../components/FooterDashboard.astro';
---

<Layout title="Boutique - Orbite">
  <HeaderDashboard />
  
  <main class="min-h-screen bg-gradient-to-b from-purple-950 via-purple-900 to-black pt-20">
    
    <!-- Messages d'√©tat -->
    <div id="auth-error" class="max-w-4xl mx-auto px-4 py-8 hidden">
      <div class="bg-red-900/50 border border-red-500 text-white p-6 rounded-lg text-center">
        <div class="text-6xl mb-4">üîí</div>
        <h2 class="text-2xl font-bold mb-2">Acc√®s restreint</h2>
        <p class="mb-4">Vous devez √™tre connect√© pour acc√©der √† la boutique.</p>
        <a href="/login?redirect=/profile/shop" class="inline-block px-6 py-3 bg-yellow-400 text-black rounded-full hover:bg-yellow-500 transition-all font-medium">
          üîë Se connecter
        </a>
      </div>
    </div>

    <div id="shop-content" class="max-w-6xl mx-auto px-4 py-8 hidden">
      
      <!-- En-t√™te de la boutique -->
      <div class="text-center mb-12">
        <h1 class="text-4xl md:text-5xl font-bold text-white mb-4"> Boutique Orbite</h1>
        <p class="text-xl text-purple-200 max-w-3xl mx-auto leading-relaxed mb-8">
          Personnalisez votre profil avec des cercles orbitaux uniques ! D√©pensez vos points pour d√©bloquer de nouveaux designs.
        </p>
        
        <!-- Affichage des points -->
        <div class="bg-gradient-to-r from-yellow-500 to-yellow-600 rounded-2xl p-6 inline-block shadow-2xl">
          <div class="flex items-center gap-3">
            <span class="text-3xl">‚≠ê</span>
            <div class="text-left">
              <p class="text-yellow-100 text-sm font-medium">Vos points</p>
              <p id="user-points" class="text-3xl font-bold text-white">0</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Navigation de retour -->
      <div class="mb-8">
        <a 
          href="/profile" 
          class="inline-flex items-center gap-2 text-purple-200 hover:text-white transition-all"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
          Retour au profil
        </a>
      </div>
      
      <!-- Grille des articles -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
        
        <!-- Article 1: Orbite Mercure -->
        <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20 shadow-2xl hover:bg-white/15 transition-all">
          <div class="text-center">
            <h3 class="text-xl font-bold text-white mb-4">Orbite Mercure</h3>
            
            <!-- Aper√ßu SVG -->
            <div class="w-32 h-32 mx-auto mb-6 bg-black/20 rounded-full p-4">
              <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg" class="w-full h-full">
                <defs>
                  <linearGradient id="mercure-orbit-shop" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#94a3b8;stop-opacity:1" />
                    <stop offset="50%" style="stop-color:#64748b;stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:#475569;stop-opacity:1" />
                  </linearGradient>
                </defs>
                <style>
                  .mercure-planet-orbit {
                    animation: mercure-rotate 8s linear infinite;
                    transform-origin: 50% 50%;
                  }
                  .mercure-planet {
                    fill: #94a3b8;
                  }
                  @keyframes mercure-rotate {
                    from { transform: rotate(0deg); }
                    to { transform: rotate(360deg); }
                  }
                </style>
                <circle cx="100" cy="100" r="95" fill="none" stroke="url(#mercure-orbit-shop)" stroke-width="4"/>
                <g class="mercure-planet-orbit">
                  <circle cx="100" cy="5" r="7" class="mercure-planet"/>
                </g>
              </svg>
            </div>
            
            <div class="space-y-4">
              <div class="flex items-center justify-center gap-2">
                <span class="text-2xl">‚≠ê</span>
                <span class="text-2xl font-bold text-white">100 points</span>
              </div>
              
              <p class="text-purple-200 text-sm">
                Un cercle orbital √©l√©gant aux tons argent√©s, parfait pour un style minimaliste.
              </p>
              
              <button 
                class="purchase-btn w-full bg-gradient-to-r from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700 text-white font-bold py-3 px-6 rounded-full transition-all transform hover:scale-105 shadow-lg"
                data-item="mercure"
                data-price="100"
                data-name="Orbite Mercure"
              >
                <span class="btn-text">Acheter</span>
              </button>
            </div>
          </div>
        </div>

        <!-- Article 2: Orbite V√©nus -->
        <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20 shadow-2xl hover:bg-white/15 transition-all">
          <div class="text-center">
            <h3 class="text-xl font-bold text-white mb-4">Orbite V√©nus</h3>
            
            <!-- Aper√ßu SVG -->
            <div class="w-32 h-32 mx-auto mb-6 bg-black/20 rounded-full p-4">
              <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg" class="w-full h-full">
                <defs>
                  <linearGradient id="venus-orbit-shop" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#fbbf24;stop-opacity:1" />
                    <stop offset="50%" style="stop-color:#f59e0b;stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:#eab308;stop-opacity:1" />
                  </linearGradient>
                </defs>
                <style>
                  .venus-planet-orbit {
                    animation: venus-rotate 12s linear infinite;
                    transform-origin: 50% 50%;
                  }
                  .venus-planet {
                    fill: #fbbf24;
                  }
                  @keyframes venus-rotate {
                    from { transform: rotate(0deg); }
                    to { transform: rotate(360deg); }
                  }
                </style>
                <circle cx="100" cy="100" r="95" fill="none" stroke="url(#venus-orbit-shop)" stroke-width="4"/>
                <g class="venus-planet-orbit">
                  <circle cx="100" cy="5" r="8" class="venus-planet"/>
                </g>
              </svg>
            </div>
            
            <div class="space-y-4">
              <div class="flex items-center justify-center gap-2">
                <span class="text-2xl">‚≠ê</span>
                <span class="text-2xl font-bold text-white">200 points</span>
              </div>
              
              <p class="text-purple-200 text-sm">
                Un cercle orbital dor√© et lumineux, symbole de richesse et d'√©l√©gance.
              </p>
              
              <button 
                class="purchase-btn w-full bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-600 hover:to-yellow-700 text-black font-bold py-3 px-6 rounded-full transition-all transform hover:scale-105 shadow-lg"
                data-item="venus"
                data-price="200"
                data-name="Orbite V√©nus"
              >
                <span class="btn-text">Acheter</span>
              </button>
            </div>
          </div>
        </div>

        <!-- Article 3: Orbite Terre -->
        <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20 shadow-2xl hover:bg-white/15 transition-all">
          <div class="text-center">
            <h3 class="text-xl font-bold text-white mb-4">Orbite Terre</h3>
            
            <!-- Aper√ßu SVG -->
            <div class="w-32 h-32 mx-auto mb-6 bg-black/20 rounded-full p-4">
              <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg" class="w-full h-full">
                <defs>
                  <linearGradient id="terre-orbit-shop" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#3b82f6;stop-opacity:1" />
                    <stop offset="50%" style="stop-color:#10b981;stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:#1e40af;stop-opacity:1" />
                  </linearGradient>
                </defs>
                <style>
                  .terre-planet-orbit {
                    animation: terre-rotate 15s linear infinite;
                    transform-origin: 50% 50%;
                  }
                  .terre-planet {
                    fill: #3b82f6;
                  }
                  @keyframes terre-rotate {
                    from { transform: rotate(0deg); }
                    to { transform: rotate(360deg); }
                  }
                </style>
                <circle cx="100" cy="100" r="95" fill="none" stroke="url(#terre-orbit-shop)" stroke-width="4"/>
                <g class="terre-planet-orbit">
                  <circle cx="100" cy="5" r="8" class="terre-planet"/>
                </g>
              </svg>
            </div>
            
            <div class="space-y-4">
              <div class="flex items-center justify-center gap-2">
                <span class="text-2xl">‚≠ê</span>
                <span class="text-2xl font-bold text-white">400 points</span>
              </div>
              
              <p class="text-purple-200 text-sm">
                Un cercle orbital aux couleurs de notre plan√®te, m√©lange harmonieux de bleu et de vert.
              </p>
              
              <button 
                class="purchase-btn w-full bg-gradient-to-r from-blue-500 to-green-500 hover:from-blue-600 hover:to-green-600 text-white font-bold py-3 px-6 rounded-full transition-all transform hover:scale-105 shadow-lg"
                data-item="terre"
                data-price="400"
                data-name="Orbite Terre"
              >
                <span class="btn-text">Acheter</span>
              </button>
            </div>
          </div>
        </div>

        <!-- Article 4: Orbite Mars -->
        <div class="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20 shadow-2xl hover:bg-white/15 transition-all">
          <div class="text-center">
            <h3 class="text-xl font-bold text-white mb-4">Orbite Mars</h3>
            
            <!-- Aper√ßu SVG -->
            <div class="w-32 h-32 mx-auto mb-6 bg-black/20 rounded-full p-4">
              <svg viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg" class="w-full h-full">
                <defs>
                  <linearGradient id="mars-orbit-shop" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#ef4444;stop-opacity:1" />
                    <stop offset="50%" style="stop-color:#dc2626;stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:#991b1b;stop-opacity:1" />
                  </linearGradient>
                </defs>
                <style>
                  .mars-planet-orbit {
                    animation: mars-rotate 20s linear infinite;
                    transform-origin: 50% 50%;
                  }
                  .mars-planet {
                    fill: #ef4444;
                  }
                  @keyframes mars-rotate {
                    from { transform: rotate(0deg); }
                    to { transform: rotate(360deg); }
                  }
                </style>
                <circle cx="100" cy="100" r="95" fill="none" stroke="url(#mars-orbit-shop)" stroke-width="4"/>
                <g class="mars-planet-orbit">
                  <circle cx="100" cy="5" r="7.5" class="mars-planet"/>
                </g>
              </svg>
            </div>
            
            <div class="space-y-4">
              <div class="flex items-center justify-center gap-2">
                <span class="text-2xl">‚≠ê</span>
                <span class="text-2xl font-bold text-white">600 points</span>
              </div>
              
              <p class="text-purple-200 text-sm">
                Un cercle orbital rouge intense, √©voquant la puissance et la passion de la plan√®te rouge.
              </p>
              
              <button 
                class="purchase-btn w-full bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white font-bold py-3 px-6 rounded-full transition-all transform hover:scale-105 shadow-lg"
                data-item="mars"
                data-price="600"
                data-name="Orbite Mars"
              >
                <span class="btn-text">Acheter</span>
              </button>
            </div>
          </div>
        </div>
      </div>
      
      
    </div>
    
    <!-- Messages de succ√®s/erreur -->
    <div id="success-message" class="fixed top-24 right-4 bg-green-600 text-white p-4 rounded-lg shadow-lg transform translate-x-full transition-transform z-50">
      <div class="flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
        <span id="success-text">Achat r√©ussi !</span>
      </div>
    </div>
    
    <div id="error-message" class="fixed top-24 right-4 bg-red-600 text-white p-4 rounded-lg shadow-lg transform translate-x-full transition-transform z-50">
      <div class="flex items-center gap-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
        <span id="error-text">Une erreur s'est produite</span>
      </div>
    </div>
  </main>
  
  <FooterDashboard />
</Layout>

<!-- Modal de confirmation d'achat -->
<div id="purchase-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-2xl p-8 max-w-md w-full">
      <div class="text-center">
        <div class="text-6xl mb-4">üõí</div>
        <h3 class="text-2xl font-bold text-gray-900 mb-4">Confirmer le d√©blocage</h3>
        
        <div class="mb-6">
          <p class="text-gray-600 mb-2">Vous √™tes sur le point de d√©bloquer :</p>
          <p id="modal-item-name" class="text-xl font-bold text-purple-600 mb-2">Orbite Mercure</p>
          <div class="flex items-center justify-center gap-2">
            <span class="text-2xl">‚≠ê</span>
            <span id="modal-item-price" class="text-2xl font-bold text-gray-900">25 points</span>
          </div>
        </div>
        
        <div class="flex gap-3">
          <button 
            id="confirm-purchase-btn" 
            class="flex-1 bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-full transition-all"
          >
            Confirmer
          </button>
          <button 
            id="cancel-purchase-btn" 
            class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 font-bold py-3 px-6 rounded-full transition-all"
          >
            Annuler
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import PocketBase from 'pocketbase';
  
  const pb = new PocketBase('https://pocketbaseprojet.alexandre-demling.fr');
  let currentUser = null;
  let selectedItem = null;
  let userOwnedOrbits = [];
  
  document.addEventListener('DOMContentLoaded', async () => {
    await initShop();
  });
  
  async function initShop() {
    // V√©rifier l'authentification
    if (!pb.authStore.isValid) {
      document.getElementById('auth-error').classList.remove('hidden');
      return;
    }
    
    try {
      // R√©cup√©rer les donn√©es utilisateur
      currentUser = pb.authStore.model;
      console.log('üë§ Utilisateur connect√©:', currentUser);
      
      // Afficher le contenu de la boutique
      document.getElementById('shop-content').classList.remove('hidden');
      
      // Charger les donn√©es
      await loadUserData();
      
      // Configurer les √©v√©nements
      setupEventListeners();
      
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement de la boutique:', error);
      showError('Erreur lors du chargement de la boutique');
    }
  }
  
  async function loadUserData() {
  try {
    // R√©cup√©rer les donn√©es utilisateur FRA√éCHES depuis la base
    const user = await pb.collection('users').getOne(currentUser.id, {
      requestKey: Date.now().toString() // √âviter la mise en cache
    });
    console.log('üìä Donn√©es utilisateur fra√Æches:', user);
    
    // Calculer le total des points (sans d√©duction)
    try {
      // R√©cup√©rer les √©v√©nements cr√©√©s
      const userEvents = await pb.collection('event').getFullList({
        filter: `users = "${currentUser.id}"`
      });
      
      // R√©cup√©rer les participations
      const userParticipations = await pb.collection('event').getFullList({
        filter: `participe ~ "${currentUser.id}"`
      });
      
      // Calculer les points totaux
      const creationPoints = userEvents.length * 10;
      const participationPoints = userParticipations.length * 10;
      const totalPoints = creationPoints + participationPoints;
      
      console.log('üõçÔ∏è Points boutique:');
      console.log('- Cr√©ation:', creationPoints);
      console.log('- Participation:', participationPoints);
      console.log('- Total:', totalPoints);
      
      // Afficher les points totaux
      document.getElementById('user-points').textContent = totalPoints;
      
    } catch (error) {
      console.error('‚ùå Erreur calcul points:', error);
      // Fallback sur les points DB
      const userPoints = user.points || 0;
      document.getElementById('user-points').textContent = userPoints;
    }
    
    // R√©cup√©rer les orbites poss√©d√©es pour les boutons
    try {
      userOwnedOrbits = user.owned_orbits ? JSON.parse(user.owned_orbits) : [];
    } catch (e) {
      userOwnedOrbits = [];
    }
    
    // Mettre √† jour l'affichage des boutons
    updatePurchaseButtons();
    
    console.log('üõçÔ∏è Orbites poss√©d√©es:', userOwnedOrbits);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du chargement des donn√©es utilisateur:', error);
  }
}
  
  function updatePurchaseButtons() {
  const purchaseButtons = document.querySelectorAll('.purchase-btn');
  
  // Calculer les points totaux actuels
  const currentPoints = parseInt(document.getElementById('user-points').textContent) || 0;
  
  // Seuils de d√©blocage
  const orbitThresholds = {
    mercure: 100,
    venus: 200,
    terre: 400,
    mars: 600,
  };
  
  purchaseButtons.forEach(button => {
    const orbitType = button.dataset.item;
    const requiredPoints = orbitThresholds[orbitType];
    const btnText = button.querySelector('.btn-text');
    
    if (userOwnedOrbits.includes(orbitType)) {
      // L'utilisateur poss√®de d√©j√† cette orbite
      button.disabled = true;
      button.classList.remove('hover:scale-105');
      button.classList.add('opacity-50', 'cursor-not-allowed');
      btnText.textContent = '‚úÖ D√©bloqu√©';
    } else if (currentPoints >= requiredPoints) {
      // L'utilisateur peut d√©bloquer cette orbite
      button.disabled = false;
      button.classList.add('hover:scale-105');
      button.classList.remove('opacity-50', 'cursor-not-allowed');
      btnText.textContent = 'üåü D√©bloquer';
    } else {
      // L'utilisateur n'a pas assez de points
      button.disabled = true;
      button.classList.remove('hover:scale-105');
      button.classList.add('opacity-50', 'cursor-not-allowed');
      btnText.textContent = `üîí ${requiredPoints} pts requis`;
    }
  });
}
  
  function setupEventListeners() {
    // Boutons d'achat
    const purchaseButtons = document.querySelectorAll('.purchase-btn');
    purchaseButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        if (button.disabled) return;
        
        const item = e.target.closest('button').dataset.item;
        const price = parseInt(e.target.closest('button').dataset.price);
        const name = e.target.closest('button').dataset.name;
        
        openPurchaseModal(item, price, name);
      });
    });
    
    // Modal de confirmation
    document.getElementById('confirm-purchase-btn').addEventListener('click', confirmPurchase);
    document.getElementById('cancel-purchase-btn').addEventListener('click', closePurchaseModal);
  }
  
  function openPurchaseModal(item, price, name) {
    selectedItem = { item, price, name };
    
    document.getElementById('modal-item-name').textContent = name;
    document.getElementById('modal-item-price').textContent = `${price} points`;
    document.getElementById('purchase-modal').classList.remove('hidden');
  }
  
  function closePurchaseModal() {
    selectedItem = null;
    document.getElementById('purchase-modal').classList.add('hidden');
  }
  
  async function confirmPurchase() {
    if (!selectedItem) return;
    
    const confirmBtn = document.getElementById('confirm-purchase-btn');
    confirmBtn.disabled = true;
    confirmBtn.textContent = 'Achat en cours...';
    
    try {
      // V√©rifier que l'utilisateur est toujours authentifi√©
      if (!pb.authStore.isValid) {
        throw new Error('Session expir√©e, veuillez vous reconnecter');
      }
      
      console.log('üõí Tentative d\'achat:', {
        item: selectedItem.item,
        price: selectedItem.price,
        userId: currentUser.id,
        token: pb.authStore.token ? 'pr√©sent' : 'absent'
      });
      
      const response = await fetch('/api/shop/purchase', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${pb.authStore.token}`
        },
        body: JSON.stringify({
          orbitType: selectedItem.item,
          price: selectedItem.price
        })
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erreur HTTP:', response.status, errorText);
        throw new Error(`Erreur ${response.status}: ${errorText}`);
      }
      
      const result = await response.json();
      
      if (result.success) {
        // ‚úÖ CORRECTION : Mettre √† jour les donn√©es locales avec la r√©ponse du serveur
        userOwnedOrbits = result.ownedOrbits;
        
        // ‚úÖ Mettre √† jour l'affichage des points avec la nouvelle valeur
        document.getElementById('user-points').textContent = result.newPoints;
        
        // Afficher le succ√®s
        showSuccess(result.message);
        
        // ‚úÖ Recharger les donn√©es utilisateur pour √™tre s√ªr
        await loadUserData();
        
        // Fermer la modal
        closePurchaseModal();
      } else {
        showError(result.message);
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'achat:', error);
      showError(error.message || 'Erreur lors de l\'achat');
    } finally {
      confirmBtn.disabled = false;
      confirmBtn.textContent = 'Confirmer';
    }
  }
  
  function showSuccess(message) {
    const successEl = document.getElementById('success-message');
    const textEl = document.getElementById('success-text');
    
    textEl.textContent = message;
    successEl.classList.remove('translate-x-full');
    
    setTimeout(() => {
      successEl.classList.add('translate-x-full');
    }, 3000);
  }
  
  function showError(message) {
    const errorEl = document.getElementById('error-message');
    const textEl = document.getElementById('error-text');
    
    textEl.textContent = message;
    errorEl.classList.remove('translate-x-full');
    
    setTimeout(() => {
      errorEl.classList.add('translate-x-full');
    }, 3000);
  }
</script>

<style>
  /* Styles sp√©cifiques pour chaque plan√®te */
  .mercure-planet-orbit {
    animation: mercure-rotate 8s linear infinite;
    transform-origin: 50% 50%;
  }

  .venus-planet-orbit {
    animation: venus-rotate 12s linear infinite;
    transform-origin: 50% 50%;
  }

  .terre-planet-orbit {
    animation: terre-rotate 15s linear infinite;
    transform-origin: 50% 50%;
  }

  .mars-planet-orbit {
    animation: mars-rotate 20s linear infinite;
    transform-origin: 50% 50%;
  }

  /* Hover effects pour les cartes */
  .bg-white\/10:hover {
    transform: translateY(-4px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  }
</style>
