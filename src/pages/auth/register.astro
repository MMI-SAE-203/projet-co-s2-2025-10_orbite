---
import Layout from '../../layouts/Layout.astro';
import HeaderPublic from '../../components/HeaderPublic.astro';
---

<Layout title="S'inscrire - Orbite">
  <HeaderPublic />
  
  <div class="min-h-screen bg-gradient-to-br from-purple-900 via-purple-800 to-indigo-900 flex items-center justify-center py-20">
    <div class="max-w-md w-full mx-4">
      <div class="bg-white rounded-2xl shadow-2xl p-8">
        <!-- Header -->
        <div class="text-center mb-8">
          <h1 class="text-2xl font-bold text-gray-800 mb-2">Cr√©er un compte</h1>
          <p class="text-gray-600">Rejoins la communaut√© √©tudiante UFC qui ont pas les droits pour ufc mdrr</p>
        </div>
        
        <!-- Form -->
        <form id="register-form" class="space-y-6">
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700 mb-2">
              Nom complet
            </label>
            <input 
              type="text" 
              id="name" 
              name="name" 
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
              placeholder="Votre nom complet"
            />
          </div>
          
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
              Email universitaire
            </label>
            <input 
              type="email" 
              id="email" 
              name="email" 
              required
              pattern=".*@edu\.univ-fcomte\.fr$"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
              placeholder="votre.nom@edu.univ-fcomte.fr"
            />
            <p class="text-xs text-gray-500 mt-1">
              Seuls les emails @edu.univ-fcomte.fr sont accept√©s
            </p>
          </div>
          
          <div>
            <label for="password" class="block text-sm font-medium text-gray-700 mb-2">
              Mot de passe
            </label>
            <input 
              type="password" 
              id="password" 
              name="password" 
              required
              minlength="8"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
              placeholder="Minimum 8 caract√®res"
            />
          </div>
          
          <div>
            <label for="passwordConfirm" class="block text-sm font-medium text-gray-700 mb-2">
              Confirmer le mot de passe
            </label>
            <input 
              type="password" 
              id="passwordConfirm" 
              name="passwordConfirm" 
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all"
              placeholder="Confirmez votre mot de passe"
            />
          </div>
          
          <button 
            type="submit"
            class="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-4 rounded-lg transition-colors duration-300 transform hover:scale-105"
          >
            Cr√©er mon compte
          </button>
        </form>
        
        <!-- Login link -->
        <div class="text-center mt-6">
          <p class="text-gray-600">
            D√©j√† un compte ? 
            <a href="/auth/login" class="text-purple-600 hover:text-purple-700 font-semibold">
              Se connecter
            </a>
          </p>
        </div>
        
        <!-- Error/Success messages -->
        <div id="message" class="mt-4 hidden"></div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import PocketBase from 'pocketbase';
  
  const pb = new PocketBase('http://127.0.0.1:8090');
  
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('register-form') as HTMLFormElement;
    const messageDiv = document.getElementById('message') as HTMLDivElement;
    
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(form);
      const password = formData.get('password') as string;
      const passwordConfirm = formData.get('passwordConfirm') as string;
      
      if (password !== passwordConfirm) {
        showMessage('Les mots de passe ne correspondent pas', 'error');
        return;
      }
      
      const data = {
        email: formData.get('email') as string,
        password: password,
        passwordConfirm: passwordConfirm,
        name: formData.get('name') as string,
        emailVisibility: false,
        verified: false // Compte non v√©rifi√© par d√©faut
      };
      
      try {
        console.log('üöÄ Cr√©ation du compte...');
        
        // Cr√©er l'utilisateur
        const record = await pb.collection('users').create(data);
        console.log('‚úÖ Compte cr√©√©:', record);
        
        // Stocker les donn√©es pour la page de v√©rification
        sessionStorage.setItem('pendingUser', JSON.stringify({
          email: data.email,
          name: data.name
        }));
        
        showMessage('Compte cr√©√© ! Redirection vers la v√©rification...', 'success');
        
        // Redirection vers la page de v√©rification
        setTimeout(() => {
          window.location.href = '/auth/verification';
        }, 1500);
        
      } catch (error: any) {
        console.error('‚ùå Erreur:', error);
        
        let errorMessage = 'Erreur lors de la cr√©ation du compte';
        
        if (error.response?.data) {
          const errorData = error.response.data;
          if (errorData.email) {
            errorMessage = 'Cet email est d√©j√† utilis√©';
          } else if (errorData.password) {
            errorMessage = 'Le mot de passe doit contenir au moins 8 caract√®res';
          } else {
            errorMessage = errorData.message || errorMessage;
          }
        }
        
        showMessage(errorMessage, 'error');
      }
    });
    
    function showMessage(text: string, type: 'success' | 'error') {
      messageDiv.className = `mt-4 p-4 rounded-lg ${
        type === 'success' 
          ? 'bg-green-100 text-green-700 border border-green-300' 
          : 'bg-red-100 text-red-700 border border-red-300'
      }`;
      messageDiv.textContent = text;
      messageDiv.classList.remove('hidden');
    }
  });
</script>
