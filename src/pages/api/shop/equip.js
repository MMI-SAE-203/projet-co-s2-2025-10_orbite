import PocketBase from "pocketbase"

export const prerender = false

export async function POST({ request }) {
  try {
    const data = await request.json()
    const { orbitType } = data

    console.log("‚öôÔ∏è Tentative d'√©quipement:", { orbitType })

    const pb = new PocketBase('https://pocketbaseprojet.alexandre-demling.fr')

    // V√©rifier l'authentification
    if (!pb.authStore.isValid) {
      // Essayer de r√©cup√©rer le token depuis les headers
      const authHeader = request.headers.get("authorization")
      if (authHeader) {
        const token = authHeader.replace("Bearer ", "")
        try {
          // Valider le token avec PocketBase
          pb.authStore.save(token, null)
          await pb.collection("users").authRefresh()
        } catch (authError) {
          console.error("‚ùå Token invalide:", authError)
          return new Response(
            JSON.stringify({
              success: false,
              message: "Token d'authentification invalide",
            }),
            {
              status: 401,
              headers: { "Content-Type": "application/json" },
            },
          )
        }
      } else {
        return new Response(
          JSON.stringify({
            success: false,
            message: "Non authentifi√© - token manquant",
          }),
          {
            status: 401,
            headers: { "Content-Type": "application/json" },
          },
        )
      }
    }

    // R√©cup√©rer l'utilisateur authentifi√©
    const currentUser = pb.authStore.model
    if (!currentUser || !currentUser.id) {
      return new Response(
        JSON.stringify({
          success: false,
          message: "Utilisateur non trouv√© dans le token",
        }),
        {
          status: 401,
          headers: { "Content-Type": "application/json" },
        },
      )
    }

    const userId = currentUser.id
    console.log("üë§ Utilisateur authentifi√©:", currentUser.username || currentUser.email, "ID:", userId)

    // ‚úÖ CORRECTION : R√©cup√©rer les donn√©es utilisateur FRA√éCHES depuis la base
    const user = await pb.collection("users").getOne(userId)
    console.log("üìä Donn√©es utilisateur fra√Æches:", user)

    // ‚úÖ CORRECTION : R√©cup√©rer les orbites poss√©d√©es (g√©rer les deux formats)
    let ownedOrbits = []
    try {
      if (Array.isArray(user.owned_orbits)) {
        // PocketBase stocke d√©j√† comme un tableau
        ownedOrbits = user.owned_orbits
        console.log("üìã Orbites r√©cup√©r√©es comme tableau:", ownedOrbits)
      } else if (typeof user.owned_orbits === "string" && user.owned_orbits) {
        // Stock√© comme cha√Æne JSON
        ownedOrbits = JSON.parse(user.owned_orbits)
        console.log("üìã Orbites r√©cup√©r√©es comme JSON:", ownedOrbits)
      } else {
        // Aucune orbite poss√©d√©e
        ownedOrbits = []
        console.log("üìã Aucune orbite poss√©d√©e")
      }
    } catch (e) {
      console.warn("‚ö†Ô∏è Erreur parsing owned_orbits, initialisation √† []:", e.message)
      ownedOrbits = []
    }

    console.log("üõçÔ∏è Orbites poss√©d√©es:", ownedOrbits)
    console.log("üéØ Orbite √† √©quiper:", orbitType)

    // ‚úÖ CORRECTION : V√©rifier si l'utilisateur poss√®de cette orbite
    if (orbitType !== "default" && !ownedOrbits.includes(orbitType)) {
      console.log("‚ùå Orbite non poss√©d√©e")
      return new Response(
        JSON.stringify({
          success: false,
          message: "Vous ne poss√©dez pas cette orbite !",
        }),
        {
          status: 400,
          headers: { "Content-Type": "application/json" },
        },
      )
    }

    // ‚úÖ CORRECTION : √âquiper l'orbite
    const newEquippedOrbit = orbitType === "default" ? "" : orbitType

    await pb.collection("users").update(userId, {
      equipped_orbit: newEquippedOrbit,
    })

    console.log("‚úÖ Orbite √©quip√©e:", newEquippedOrbit || "default")

    return new Response(
      JSON.stringify({
        success: true,
        message: orbitType === "default" ? "Orbite par d√©faut √©quip√©e" : `${getOrbitName(orbitType)} √©quip√© !`,
        equippedOrbit: newEquippedOrbit,
      }),
      {
        status: 200,
        headers: { "Content-Type": "application/json" },
      },
    )
  } catch (error) {
    console.error("‚ùå Erreur lors de l'√©quipement:", error)

    return new Response(
      JSON.stringify({
        success: false,
        message: "Erreur lors de l'√©quipement",
        error: error.message,
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json" },
      },
    )
  }
}

function getOrbitName(orbitType) {
  const names = {
    mercure: "Orbite Mercure",
    venus: "Orbite V√©nus",
    terre: "Orbite Terre",
    mars: "Orbite Mars",
  }
  return names[orbitType] || "Orbite"
}
